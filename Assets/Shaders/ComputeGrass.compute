// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<float4> _Positions;
uint _Resolution;
uint _MaxTerrainHeight;
float _HalfBoundsHeight;
float _Density;

Texture2D<float4> _HeightMap;
SamplerState sampler_HeightMap;

Texture2D<float4> _NoiseMapHeight;
SamplerState sampler_NoiseMapHeight;
float _PositionalNoiseStrength;

#define MIN_GRASS_HEIGHT 0.5f;

float UnityRandomFloat(const uint3 seed)
{
    const float random_no =  frac(sin(dot(seed.xy, float2(12.9898, 78.233)))*43758.5453);
    return lerp(0.0f, _PositionalNoiseStrength, random_no);
}

void SetPosition(const uint3 id)
{
    if (id.x >= _Resolution || id.y >= _Resolution)
    {
        return;
    }

    // convert position to texture space
    float2 uv = id.xy;
    uv.xy /= _Resolution;

    // sample heightmap
    const float displacement = _HeightMap.SampleLevel(sampler_HeightMap, uv, 0).r;
    
    // sample height data
    const float height = _NoiseMapHeight.SampleLevel(sampler_NoiseMapHeight, uv, 0).r + MIN_GRASS_HEIGHT;

    const float noise = UnityRandomFloat(id);
    const float2 positional_noise = float2(noise, _PositionalNoiseStrength - noise);
    
    // calculate position
    float4 position = float4(id.x, 0, id.y, height);
    position.xz += positional_noise;
    position.xz -= _Resolution * 0.5f; // adjust by half the resolution to center
    position.xz /= _Density;
    position.y += displacement * _MaxTerrainHeight - _HalfBoundsHeight;
    
    _Positions[id.x + id.y * _Resolution] = position;
}

[numthreads(8,8,1)]
void CSMain (const uint3 id : SV_DispatchThreadID)
{
    SetPosition(id);
}
